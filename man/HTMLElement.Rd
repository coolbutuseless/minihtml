% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HTMLElement.R
\docType{class}
\name{HTMLElement}
\alias{HTMLElement}
\alias{html_elem}
\title{HTML element builder}
\description{
It is up to the user to escape text if necessary. See \code{esc()} and \code{attesc()}
functions to help with this, although if you are working within shiny,
then this should happen automatically.
}
\section{Usage}{

\preformatted{elem <- HTMLElement$new("a", href = "link.html")
elem <- html_elem('a', href = "link.html")

elem$update(margin = "auto")

new_elem <- elem$copy()

}
}

\section{Methods}{


\describe{



\item{\code{$new(name, ...)}}{
Create a new \code{HTMLElement} with the given name. Extra named arguments
are treated as tag attributes, and unnamed arguments are considered child
nodes.
\tabular{ll}{
  \code{name} \tab name of html tag to create \cr
  \code{...} \tab attribute name/value pairs, and child nodes \cr
}
}


\item{\code{$update(...)}}{
Updates the attributes and children.

Named arguments are considered attributes and will overwrite
existing attributes with the same name. Set to NULL to delete the attribute.
Set to NA to make this a bare attribute without a value.

Unnamed arguments are appended to the list of child nodes.  These
should be text, other HTMLElements or any ojbect that can be represented
as a single text string using "as.character()".  To be specific about
where in the child list a node will be placed, use \code{$append()}
\tabular{ll}{
  \code{...} \tab attribute name/value pairs, and child nodes \cr
}
}


\item{\code{$append(...)}}{
Append \code{HTMLElement} objects as children to this element
\tabular{ll}{
  \code{...} \tab all arguments treated as HTMLElement objects and added as the children of this element \cr
}
}


\item{\code{$add(name, ...)}}{
Create a new \code{HTMLElement} and add it as a  child to this element. Return the
new element.  \emph{See \code{$new()} for description of arguments.}
}

\item{\code{$remove(indices)}}{
Remove \code{HTMLElement} child objects from this element by index.
\tabular{ll}{
  \code{indices} \tab indices of HTMLElement objects to remove \cr
}
}

\item{\code{$as_character(include_declaration)}}{
Convert \code{HTMLElement} to a character string.
\tabular{ll}{
  \code{include_declaration} \tab Include the leading \code{DOCTYPE} declaration in the output. Defaults to FALSE for \code{HTMLElement} and TRUE for \code{HTMLDocument} \cr
}
}

\item{\code{$save(filename, include_declaration)}}{
Save \code{HTMLElement} to file.
\tabular{ll}{
  \code{filename}            \tab filename \cr
  \code{include_declaration} \tab Include the leading \code{DOCTYPE} declaration in the output. Defaults to FALSE for \code{HTMLElement} and TRUE for \code{HTMLDocument} \cr
}
}

\item{\code{$print()}}{
Print \code{HTMLElement} to terminal.
\tabular{ll}{
  \code{include_declaration} \tab Include the leading \code{DOCTYPE} declaration in the output. Defaults to FALSE for \code{HTMLElement} and TRUE for \code{HTMLDocument} \cr
}
}

\item{\code{$copy()}}{
Copy \code{HTMLElement}.
}

}
}

\examples{
\dontrun{
HTMLElement$new('div', class = ".big", "DIV contents")
}


}
\keyword{datasets}
